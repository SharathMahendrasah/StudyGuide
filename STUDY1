Study Guide Answer Sheet

1. Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.

2. In a distributed version control system the whole repository is fully mirrored meaning if the server goes down anyone of the client repositories can be used. Whereas if a centralized version control system were to fail then everyone and everything comes to a stop for as long as that server is down. The files are not mirrored anywhere and are just on the server for multiple people to collaborate on. 

3. It allows a user or users to see what changes have been made to a project. If there was an error on a newer iteration of a commit, a person is able to go back and see where that error occurred. 

4. A commit is when a user saves a document locally using git. When a user commits usually the user has to include a short comment as to what has changed since the previous iteration. 

5. A git check out updates files in the directory to match the iteration of the one in the index or the edited file.

6. A branch is when a user creates another iteration other than main in which that person can work on without messing with the main. This allows the user to experiment and if something goes wrong they can always go back to the main line since that was not changed.

7. Branches in git can exist for as long as a user wants it to. A branch will only cease to exist if a user inputs in the terminal that they no longer want the branch.

8. To create a new branch a user needs in input git branch. This will create a pointer which points to the main line. This however will not switch you to the new branch. The user will still be on master branch. 

9. To switch branches in git a user should type in “git checkout” then whatever they want the branch name to be. By doing this the user is no longer on the master branch but have switched to one they created. 

10. To merge branches in git a user must first check out the branch that they wish to merge into then run the git merge command. If the merge takes place between a branch and another branch that is not it’s ancestor then there will be a three-way merge between the two branches specified and the common ancestor. 

11. A user would use git status in the terminal to check the status of the files he/she is working on. To track a new file a user would input git add. If a user didn’t use the git add the file would be displayed in red in git status meaning it hasn’t been tracked.

12. There are two ways a user could add a file to their repository. One way is to use GitHub, go to the repository and browse to the folder where you want to create the file, click new file, on the edit new file tab add content to the line, review content by pressing preview, write a commit message and whether you want the file to be on the master branch or a new branch. The other way to add a file is through the terminal window, change directory to local repository, stage the file for first commit, commit files saved in local repository, push changes to GitHub if necessary. 

13. The primary branch in git is master. 

14. To see what branch a user has checked out they would type in git branch in the terminal window and clicking enter. By doing so all current branches show up in a short list. The branch that you are currently on will have an asterisk next to it.

15. GitHub is a way to build software amongst many people. A person can discover, use and contribute to many different projects using this development workflow. 

16. Git was created because there was a need for it. After the community that developed Linux and the company that developed BitKeeper broke down a new development workflow was needed. Some reasons that were in mind when creating git were speed, simple design, strong support for non linear development, fully distributed and able to handle large projects like the Linux kernel efficiently. 

17. A typical git workflow contains: anything on the master branch (which is deployable), if working on something new give a descriptive name, commit to branch locally push your work to the same named branch regular, when feedback is needed or branch might be ready for merging open a pull request, merge branch once it has been reviewed by someone else, can and should deploy once pushed to master.

18. Git stores data differently. I’s more like a miniature filesystem since Git data is more like a set of snapshots. If something is not changed in the file then it will not save it. It basically takes a picture of what all your files look like at that moment and stores a reference to that snapshot.

19. The design criteria for git was that it had to be fast, simple design, have strong support for non-linear development, be fully distributed, and able to handle lard projects like the Linux kernel efficiently as well as easy to use.

20. A user could use the command git log, this will bring up a list of commits that were made in the repository in reverse chronological order. This will also include the SHA-1 checksum.

21. There should be enough information in the commit to give a person an idea of what changes were made. That way if a person who goes to work on the project after you will know what you did. Also this helps to keep everything from being confusing. Give context as to what and why you changed what you did. 

22. To fix a mistake that was made in the past of a project specifically in the commit, a user can use the git commit —-amend by doing this your commit will look as if it did before you confirmed the commit. Another way would not really be how to fix it in the past but you could change branches if the problem only showed up in said branch and not master.


